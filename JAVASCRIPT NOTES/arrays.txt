- Arrays -
An array is used for holding a list of items where the order matters.
Each thing inside of the array is called an item and it's position in the array is called an index.
The number of items inside of an array is called a length.
Each item inside of an array can be any type. It can be a string, a number, a boolean, an object, another array, a nested array, you name it.
Whereas curly brackets are for an object, square brackets [] are used for noting you are creating an array or an *array literal**.

const names = ['wes', 'kait', 'snickers'];
What you have done there is created an array with 3 items, each of which are separated by a comma.
An array has no keys. The keys will always be the indexes meaning 0,1,2,3,4,5..

An array is actually just an object at the end of the day, meaning that it can hold data and have a bunch of methods living inside of it.

If you do need to check whether something is an array, you can do that like so -
Array.isArray(names);
That will return true or false depending on whether whatever you pass it

If you want to access things inside of an array, you use the index.
console.log(names[1]);

Because arrays are what are referred to as zero based. What that means is that the counting starts at 0.
In order to access the first item in an array you use the zero index like so -
console.log(names[0]); // wes
console.log(names[1]); // kait
console.log(names[2]); // snickers

If you want to check how many items are in an array, you would use .length. 
That is NOT zero based.
console.log(names.length); // 3

When you need to access the last item in the array but do not know how many there are, you can use the length property like so -
console.log(names[names.length - 1]); // snickers

If you tried to do console.log(names[names.length]), it will return undefined.
That is because the length property is 3, but the last index is 2.

- Array Methods -
The Array prototype is full of useful methods for adding, removing and finding things inside of the array.
We will go over the more important ones and learning the idea of immutability, mutable and immutable.

Mutable methods perform mutations.
When something changes the original version of it, that is what is referred to as a mutation.
Immutable methods do not change the original thing, they simply return an new array.

// Mutative Method
const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];
const numbersBackwards = numbers.reverse();
console.log(numbersBackwards); // [9, 8, 7, 6, 5, 4, 3, 2, 1]
console.log(numbers); // [9, 8, 7, 6, 5, 4, 3, 2, 1]
The original array has actually been reversed as well.
That is what is referred to as a mutation, meaning the original data has been changed from what it was originally set out to be.

Mutability is not necessarily bad or incorrect, it's just something important to know about JavaScript, that some methods will modify the original array, 
whereas some will create a new array and leave the original one intact.


The slice() method allows us to take a portion of the array and make it into a new array.
const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];
console.log(numbers); // [1, 2, 3, 4, 5, 6, 7, 8, 9]
const pizzaSlice = numbers.slice(2, 4);
console.log(pizzaSlice); // [3, 4]
What you have done is you have gone from index 2, which is the 3rd item and stopped at index 4, which is the 5th item.

Slice returns to use the subset of the original array, based on the index values we pass it.
If you ever need to take a chunk out of an array, you can reach for slice.
That is referred to as immutable methods, meaning they do not change the original data. Mutation methods do change the original data.


const numbersReversed = [...numbers];
console.log(numbersReversed); // [1, 2, 3, 4, 5, 6, 7, 8, 9]
console.log(numbers); // [1, 2, 3, 4, 5, 6, 7, 8, 9]
numbersReversed.reverse(); // [9, 8, 7, 6, 5, 4, 3, 2, 1]

const numbersReversed = [...numbers].reverse(); // [9, 8, 7, 6, 5, 4, 3, 2, 1]

Anytime you want to call a mutable method without mutating the original thing, you should first take a copy of it and then call the method.
Most of the methods that we will learn about in arrays are immutable, but the few that aren't can get cha.


One thing you will want to do with an array is add items to it. For that, use the push() method.
names.push('lux');
console.log(names); // ['wes', 'kait', 'snickers', 'lux']
This does mutate the original array.

If you didn't want to mutate the original array you could do something like this -
const names2 = [...names, 'lux'];

If you want to add an item to the front of an array, you wouldn't use push, because that adds the item to the back of the array.
You would use unshift() instead.
names.unshift('poppy');
console.log(names); // ['poppy', 'wes', 'kait', 'snickers', 'lux']

The immutable way to do that would be -
const names2 = ['poppy', ...names];
console.log(names2); // ['poppy', 'wes', 'kait', 'snickers', 'lux']


The next two methods you will mix up for the rest of your life: splice() and slice().
We have already covered slice(), which allows you to take a portion out of the original array.
But there also is splice().
Both are used for grabbing a subset of the array but slice() is immutable and splice() is mutable.

The slice() method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included) where begin and end represent the index of items in that array. 
The original array will not be modified.
What they mean by end not included means that in our examples where we did slice(2,4), it took the items start at index 2, but not at index 4. 
The end is not inclusive.

Splice on the other hand will actually take the item out of the original array.

The splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.
The other gotcha is that there is no start and end in splice.
Splice has a start and then how many you should go for. For example if you want to start at one and delete 5, you would use splice.

console.log(numbers); // [1, 2, 3, 4, 5, 6, 7, 8, 9]
numbers.splice(3, 2);
console.log(numbers); // [1, 2, 3, 6, 7, 8, 9]

We started at index 3 which was the #4. Then we went for two items, for #4, #5 and took those out of the array.
That is mutable, whereas slice will just return a new array.
More often than not you will want to reach for slice because of that.


Now let's talk about adding items to the middle of an array.
It is best to use the spread operator.
There is no method to insert an item at a specific index and have the rest push over.

const bikes = ['bianchi', 'miele', 'panasonic', 'miyata'];
const newBikes = [...bikes.slice(0, 2), 'benotto', ...bikes.slice(2)];
console.log(newBikes); // ['bianchi', 'miele', 'benotto', 'panasonic', 'miyata']
You took the first 2 and spread them into it, and then you add the new item, take everything else after that and spread it into there.

What if you want to remove an item, like panasonic, from the array?
const newBikes2 = [...newBikes.slice(0, 3), ...newBikes.slice(4)];
console.log(newBikes2); // ['bianchi', 'miele', 'benotto', 'miyata']
You basically find where that thing is in the array, and then you use it's index to remove it.

const comments = [
  { text: 'Cool Beans', id: 123 },
  { text: 'Love this', id: 133 },
  { text: 'Neato', id: 233 },
  { text: 'good bikes', id: 333 },
  { text: 'so good', id: 433 },
];

How do you find the index of something, based on the item you are searching for?
You use a method called findIndex().
const kaitIndex = names.findIndex('kait');
console.log(kaitIndex); // 1

It's not as easy as that because our structures are going to be a bit more complex than just strings.
In this case, you want to find an object based on it's id.
If that is the case, you will do something very similar to a loop.
findIndex() will loop over every single item and then when it finds the item that you want, it will return true and that will give us the index.

const kaitindex = names.findIndex((name) => {
  return name === 'kait';
});

- Array Static Methods -

const numbers = [1, 2, 3, 4, 5];
Array.of('wes', 'kait'); // Creates an array of the arguments passed to it -> ['wes', 'kait']

createRange(start, end);
