- Closures -
Closures is one of the scariest words in JavaScript and a concept that comes up all the time in JavaScript, especially in interviews.
It's a hard concept to get, but it can be relatively simple to understand. We will tackle now understanding of the basics of what a closure is.

A closure is the ability to access a parent level scope from a child scope, even after the parent function has been terminated.

Example:

function outer() {
  const outerVar = "Hey I am the outer Var";

  function inner() {
    const innerVar = "hey I am an inner var";
    console.log(innerVar);
    console.log(outerVar);
  }

  inner();
}
outer();

The inner() function is able to do a scope lookup and see the outer. We have already learned about that, and that's not really a closure.
Now the kind of interesting thing, and this is where closures come into play, is where you don't call the inner() function from within the outer() function but you call it at a later point in time.

What you can do is stick a function into a variable, and then at a later point in time, you can have access to that function. A closure comes into play because you can access the function even though the outer function is done.
We learned in scoping that when a function is done, anytime there are scoped variables that aren't returned from the function, they are not accessible.
Now we get this weird thing where when we run the function outside of it, it's still able to access it. That is what is referred to as a closure.

JavaScript is able to create functions inside of functions, and it can still reach outside to the parent scope, and even though the outer function is done running, it will still maintain that variable in memory so that we can then access it at a later time.
The variable is not cleaned up or "garbage collected" which is a term that is often used.

- Real World Example -

function createGreeting(greeting = "") {
  const myGreet = greeting.toUpperCase();

  return function(name) {
    return `${myGreet} ${name}`;
  };
}

This function:
1. takes in a greeting, the default of which is an empty string
2. assigns it to the myGreet variable which takes the greeting that got passed in to the function
3. then runs toUpperCase() against it.

Since our inner scope references a variable that was created in our outer scope, that is what is referred to as closure.

- Private Variables -

Example:
function createGame(gameName){
  let score = 0;

  return function win(){
    score ++;
    return `Your name ${gameName} score is ${score}`
  }
}
const hockeyGame = createGame('Hockey');

Now, whenever we run the hockey game function, a message will be logged in the console showing the incrementing score.
What is happening there is the function that we create is called win(), and we are using a score variable.
So whenever we create the game, we initialize a score variable with a value of 0.
And then the inner function, whenever we actually run it, will increment the score variable that is of the outer scope.

Why is that helpful?
That allows you to maintain multiple games at once.

To recap:
Closures are the ability of a child function, or an inner function,
to access variables from a higher level scope even after the functions have been called or closed or closed over.